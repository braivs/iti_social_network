{"version":3,"sources":["components/Sidebar/Sidebar.module.scss","components/Dialogs/Dialogs.module.scss","components/Dialogs/Message/Message.module.scss","components/Profile/MyPosts/Post/Post.module.css","components/Sidebar/FriendItem/FriendsItem.module.scss","components/Profile/MyPosts/MyPost.module.css","components/Users/Users.module.css","components/Header/Header.module.css","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","redux/profile-reducer.ts","redux/users-reducer.ts","redux/redux-store.ts","img/ava_orange.png","components/Users/UsersContainer.tsx","components/Users/Users.tsx","components/Header/Header.tsx","components/Sidebar/FriendItem/FriendItem.tsx","components/Sidebar/SidebarContainer.tsx","components/Sidebar/Sidebar.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","components/Profile/ProfileInfo/ProfileInfoContainer.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","App.tsx","index.tsx"],"names":["module","exports","initialState","dialogs","id","name","messages","message","author","avatar","newMessageAuthor","newMessageBody","dialogsReducer","state","action","type","newAuthor","body","newMessage","Date","getTime","friends","sidebarReducer","top","imgSrc","imgAlt","description","posts","likesCount","newPostText","profileReducer","newPost","newText","users","usersReducer","map","u","userId","followed","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","store","createStore","window","UsersContainer","connect","dispatch","follow","followAC","unfollow","unfollowAC","setUsers","setUsersAC","props","length","photoUrl","defaultAva","fullName","status","location","city","country","src","className","s","userPhoto","onClick","Header","header","alt","FriendItem","friendContainer","SidebarContainer","FriendsElements","f","navbarContainer","nav","item","to","activeClassName","active","friendsContainer","DialogItem","path","dialog","Message","messagesContainer","left","right","DialogsContainer","updateNewMessageAuthor","updateNewMessageAuthorCreator","updateNewMessageBody","updateNewMessageBodyCreator","sendMessage","dialogsElements","d","messagesElements","m","dialogItems","newMessageContainer","placeholder","onChange","e","target","value","newMessageText","ProfileInfoContainer","descriptionBlock","Post","process","text","likes","MyPostsContainer","updateNewPostText","updateNewPostTextActionCreator","addPost","postElements","p","newPostElement","React","createRef","postsBlock","current","ref","Profile","content","News","Music","Settings","App","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2978c6da.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbarContainer\":\"Sidebar_navbarContainer__2QSFN\",\"nav\":\"Sidebar_nav__2MdGl\",\"item\":\"Sidebar_item__3Pzt7\",\"active\":\"Sidebar_active__2AdQ5\",\"friends\":\"Sidebar_friends__1kZEE\",\"friendsContainer\":\"Sidebar_friendsContainer__30djq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1Vupe\",\"dialogItems\":\"Dialogs_dialogItems__7zRyr\",\"messages\":\"Dialogs_messages__1aY6c\",\"newMessageContainer\":\"Dialogs_newMessageContainer__1oGqS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messagesContainer\":\"Message_messagesContainer__xWJyo\",\"left\":\"Message_left__3dsWC\",\"right\":\"Message_right__1fsGK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__16f0L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendContainer\":\"FriendsItem_friendContainer__6ye-A\",\"avatar\":\"FriendsItem_avatar__3yPbE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPost_postsBlock__CM_98\",\"posts\":\"MyPost_posts__50TM4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__1nceq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3y5DP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__1OmRh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2ES1U\"};","import {ActionTypes} from '../types/entities';\r\n\r\nexport type MessagesType = {\r\n  id: number\r\n  message: string\r\n  author: string\r\n  avatar: string\r\n}\r\ntype DialogsType = {\r\n  id: number\r\n  name: string\r\n}\r\n\r\nexport type DialogsPageType = {\r\n  dialogs: Array<DialogsType>\r\n  messages: Array<MessagesType>\r\n  newMessageAuthor: string\r\n  newMessageBody: string\r\n}\r\n\r\nlet initialState: DialogsPageType = {\r\n  dialogs: [\r\n    {id: 1, name: 'BriWS'},\r\n    {id: 2, name: 'Masha'},\r\n    {id: 3, name: 'Lera'},\r\n    {id: 4, name: 'Liza'},\r\n    {id: 5, name: 'Diana'},\r\n    {id: 6, name: 'Kristina'}\r\n  ],\r\n  messages: [\r\n    {id: 1, message: 'Lorem ipsum dolor sit amet', author: 'Masha', avatar: 'img/ava.png'},\r\n    {id: 2, message: 'Lorem ipsum dolor sit amet', author: 'Briws', avatar: 'img/ava.png'},\r\n    {id: 3, message: 'Lorem ipsum dolor sit amet', author: 'Lera', avatar: 'img/ava.png'},\r\n    {id: 4, message: 'Lorem ipsum dolor sit amet', author: 'Liza', avatar: 'img/ava.png'}\r\n  ],\r\n  newMessageAuthor: '',\r\n  newMessageBody: ''\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsPageType = initialState, action: ActionTypes): DialogsPageType => {\r\n  switch (action.type) {\r\n    case 'UPDATE-NEW-MESSAGE-AUTHOR': {\r\n      return {\r\n        ...state,\r\n        newMessageAuthor: action.newAuthor\r\n      }\r\n    }\r\n    case 'UPDATE_NEW_MESSAGE_BODY': {\r\n      return {\r\n        ...state,\r\n        newMessageBody: action.body\r\n      };\r\n    }\r\n    case 'SEND-MESSAGE': {\r\n      let body = state.newMessageBody;\r\n      let author = state.newMessageAuthor;\r\n      const newMessage: MessagesType = {\r\n        id: new Date().getTime(),\r\n        message: body,\r\n        author: author,\r\n        avatar: 'img/ava.png'\r\n      };\r\n      return {\r\n        ...state,\r\n        newMessageAuthor: '',\r\n        newMessageBody: '',\r\n        messages: [...state.messages, newMessage]\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Action Creators:\r\nexport const sendMessageCreator = () => ({type: 'SEND-MESSAGE'} as const)\r\nexport const updateNewMessageAuthorCreator = (author: string) => {\r\n  return {\r\n    type: 'UPDATE-NEW-MESSAGE-AUTHOR', newAuthor: author\r\n  } as const\r\n}\r\nexport const updateNewMessageBodyCreator = (body: string) => {\r\n  return {\r\n    type: 'UPDATE_NEW_MESSAGE_BODY',\r\n    body: body\r\n  } as const\r\n    }\r\n\r\nexport default dialogsReducer;\r\n","import {ActionTypes} from '../types/entities';\r\n\r\ntype FriendsType = {\r\n  id: number\r\n  name: string,\r\n  avatar: string\r\n}\r\nexport type SidebarType = {\r\n  friends: Array<FriendsType>\r\n}\r\n\r\nlet initialState: SidebarType = {\r\n  friends: [\r\n    { id: 1, name: 'Liza', avatar: 'img/ava.png' },\r\n    { id: 2, name: 'Masha', avatar: 'img/ava.png' },\r\n    { id: 3, name: 'Diana', avatar: 'img/ava.png' }\r\n  ]\r\n}\r\n\r\nconst sidebarReducer = (state: SidebarType = initialState, action: ActionTypes): SidebarType => {\r\n\r\n  return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {ActionTypes} from '../types/entities';\r\n\r\nexport type TopType = {\r\n  imgSrc: string\r\n  imgAlt: string\r\n  description: string\r\n}\r\nexport type PostsType = {\r\n  id: number\r\n  message: string\r\n  likesCount: number\r\n}\r\nexport type ProfilePageType = {\r\n  top: TopType\r\n  posts: Array<PostsType>\r\n  newPostText: string\r\n}\r\n\r\nlet initialState: ProfilePageType = {\r\n  top: {\r\n    imgSrc: 'img/main.jpg',\r\n    imgAlt: '',\r\n    description: 'ava + description'\r\n  },\r\n  posts: [\r\n    {id: 1, message: 'I will be React Developer!', likesCount: 12},\r\n    {id: 2, message: 'It\\'s my first post', likesCount: 11},\r\n    {id: 3, message: 'Bugaga', likesCount: 5},\r\n    {id: 4, message: 'Dada', likesCount: 1}\r\n  ],\r\n  newPostText: ''\r\n}\r\n\r\nconst profileReducer = (state: ProfilePageType = initialState, action: ActionTypes): ProfilePageType => {\r\n  switch (action.type) {\r\n    case 'ADD-POST': {\r\n      const newPost: PostsType = {\r\n        id: new Date().getTime(),\r\n        message: state.newPostText,\r\n        likesCount: 0\r\n      };\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, newPost],\r\n        newPostText: ''\r\n      };\r\n    }\r\n    case 'UPDATE-NEW-POST-TEXT': {\r\n      return {\r\n        ...state,\r\n        newPostText: action.newText\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Action Creators:\r\nexport const addPostActionCreator = () => ({type: 'ADD-POST'} as const)\r\nexport const updateNewPostTextActionCreator = (text: string) => ({\r\n    type: 'UPDATE-NEW-POST-TEXT', newText: text\r\n} as const)\r\n\r\nexport default profileReducer\r\n\r\n\r\n","import {ActionTypes} from '../types/entities';\r\n\r\ntype locationType = {\r\n  city: string\r\n  country: string\r\n}\r\n\r\nexport type UserType = {\r\n  id: number\r\n  photoUrl: string\r\n  followed: boolean\r\n  fullName: string\r\n  status: string\r\n  location: locationType\r\n}\r\n\r\nexport type UsersPageType = {\r\n  users: Array<UserType>\r\n}\r\n\r\nconst initialState: UsersPageType = {\r\n  users: []\r\n}\r\n\r\nconst usersReducer = (state: UsersPageType = initialState, action: ActionTypes): UsersPageType => {\r\n  switch (action.type) {\r\n    case 'FOLLOW':\r\n      return {\r\n        ...state,\r\n        users: state.users.map(u => {\r\n          if (u.id === action.userId) {\r\n            return {...u, followed: true}\r\n          }\r\n          return u;\r\n        })\r\n      }\r\n    case 'UNFOLLOW':\r\n      return {\r\n        ...state,\r\n        users: state.users.map(u => {\r\n          if (u.id === action.userId) {\r\n            return {...u, followed: false}\r\n          }\r\n          return u;\r\n        })\r\n      }\r\n    case 'SET-USERS':\r\n      return {...state, users: [...state.users, ...action.users]}\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const followAC = (userId: number) => ({type: 'FOLLOW', userId} as const)\r\nexport const unfollowAC = (userId: number) => ({type: 'UNFOLLOW', userId} as const)\r\nexport const setUsersAC = (users: Array<UserType>) => ({type: 'SET-USERS', users} as const)\r\n\r\nexport default usersReducer\r\n\r\n\r\n","import {combineReducers, createStore} from 'redux';\r\nimport dialogsReducer from './dialogs-reducer';\r\nimport sidebarReducer from './sidebar-reducer';\r\nimport profileReducer from './profile-reducer';\r\nimport usersReducer from './users-reducer';\r\n\r\nconst rootReducer = combineReducers({ //этот объект надо воспринимать как state\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer\r\n  })\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n// создаёт внутри себя state у которого есть 3 свойства выше\r\nexport const store = createStore(rootReducer);\r\n\r\n// @ts-ignore\r\nwindow.store = store;","export default __webpack_public_path__ + \"static/media/ava_orange.b9b5b31c.png\";","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {followAC, setUsersAC, unfollowAC, UserType} from '../../redux/users-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {Users} from './Users';\r\n\r\ntype MapStatePropsType = {\r\n  users: Array<UserType>\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n  follow: (userId: number) => void\r\n  unfollow: (userId: number) => void\r\n  setUsers: (users: Array<UserType>) => void\r\n}\r\n\r\nexport type UsersPropsType = MapStatePropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    users: state.usersPage.users\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n  return {\r\n    follow: (userId: number) => {\r\n      dispatch(followAC(userId))\r\n    },\r\n    unfollow: (userId: number) => {\r\n      dispatch(unfollowAC(userId))\r\n    },\r\n    setUsers: (users: Array<UserType>) => {\r\n      dispatch(setUsersAC(users))\r\n    }\r\n  }\r\n}\r\n\r\nexport const UsersContainer = connect(mapStateToProps, mapDispatchToProps)(Users);","import React from 'react';\r\nimport s from './Users.module.css'\r\nimport defaultAva from '../../img/ava_orange.png';\r\nimport {UserType} from '../../redux/users-reducer';\r\nimport {UsersPropsType} from './UsersContainer';\r\n\r\nexport const Users: React.FC<UsersPropsType> = (props) => {\r\n\r\n  if (props.users.length === 0) {\r\n    props.setUsers([\r\n        {\r\n          id: 1, photoUrl: defaultAva, followed: false, fullName: 'Dmitry', status: 'I am boss',\r\n          location: {city: 'Minsk', country: 'Belarus'}\r\n        },\r\n        {\r\n          id: 2, photoUrl: defaultAva, followed: true, fullName: 'Sasha', status: 'I am boss too',\r\n          location: {city: 'Moscow', country: 'Russia'}\r\n        },\r\n        {\r\n          id: 3, photoUrl: defaultAva, followed: false, fullName: 'Andrew', status: 'I am boss too',\r\n          location: {city: 'Kiew', country: 'Ukraine'}\r\n        }\r\n      ]\r\n    )\r\n  }\r\n\r\n  return <div>\r\n    {\r\n      props.users.map(u => <div key={u.id}>\r\n        <span>\r\n          <div>\r\n            <img src={u.photoUrl} className={s.userPhoto}/>\r\n          </div>\r\n          <div>\r\n            {u.followed\r\n              ? <button onClick={() => {\r\n                props.unfollow(u.id)\r\n              }}>Unfollow</button>\r\n              : <button onClick={() => {\r\n                props.follow(u.id)\r\n              }}>Follow</button>}\r\n          </div>\r\n        </span>\r\n        <span>\r\n          <span>\r\n            <div>{u.fullName}</div>\r\n            <div>{u.status}</div>\r\n          </span>\r\n          <span>\r\n            <div>{u.location.country}</div>\r\n            <div>{u.location.city}</div>\r\n          </span>\r\n        </span>\r\n      </div>)\r\n    }\r\n  </div>\r\n}","import React from 'react';\r\nimport s from './Header.module.css';\r\n\r\nexport const Header = () => {\r\n  return <header className={s.header}>\r\n    <img src=\"img/logo.png\" alt=\"\"/>\r\n  </header>\r\n}","import React from 'react';\r\nimport s from './FriendsItem.module.scss'\r\n\r\ntype FriendItemType = {\r\n  id: number\r\n  name: string,\r\n  avatar: string\r\n}\r\n\r\nexport const FriendItem:React.FC<FriendItemType> = (props) => {\r\n  return <div className={s.friendContainer}>\r\n    <img src={props.avatar} alt=\"\" className={s.avatar}/>\r\n    {props.name}\r\n  </div>\r\n}","import React from 'react';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\nimport {SidebarType} from '../../redux/sidebar-reducer';\r\nimport {Sidebar} from './Sidebar';\r\n\r\ntype MapStatePropsType = {\r\n  sidebar: SidebarType\r\n}\r\n\r\nexport type SidebarPropsType = MapStatePropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    sidebar: state.sidebar\r\n  }\r\n}\r\n\r\nexport const SidebarContainer = connect(mapStateToProps)(Sidebar)","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './Sidebar.module.scss'\r\nimport {FriendItem} from './FriendItem/FriendItem';\r\nimport {SidebarPropsType} from './SidebarContainer';\r\n\r\nexport const Sidebar:React.FC<SidebarPropsType> = (props) => {\r\n\r\n  let FriendsElements = props.sidebar.friends.map(f => <FriendItem key={f.id} id={f.id} name={f.name} avatar={f.avatar}/>)\r\n\r\n  return (\r\n    <div className={s.navbarContainer}>\r\n      <nav className={s.nav}>\r\n        <div className={s.item}>\r\n          <NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n          <NavLink to=\"/dialogs\" activeClassName={s.active}>Dialogs</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n          <NavLink to='/news' activeClassName={s.active}>News</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n          <NavLink to='/music' activeClassName={s.active}>Music</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n          <NavLink to='/settings' activeClassName={s.active}>Settings</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n          <NavLink to='/users' activeClassName={s.active}>Users</NavLink>\r\n        </div>\r\n      </nav>\r\n      <div className={s.friends}>\r\n        <h3>Friends</h3>\r\n        <div className={s.friendsContainer}>{FriendsElements}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport s from '../Dialogs.module.scss';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype DialogItemType = {\r\n  id: number\r\n  name: string\r\n}\r\n\r\nexport const DialogItem: React.FC<DialogItemType> = (props) => {\r\n  let path = '/dialogs/' + props.id;\r\n  return (\r\n    <div className={s.dialog}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport s from './Message.module.scss'\r\n\r\ntype MessageType = {\r\n  message: string\r\n  author: string\r\n  avatar: string\r\n}\r\nexport const Message: React.FC<MessageType> = (props) => {\r\n\r\n\r\n  return <div className={s.messagesContainer}>\r\n    <div className={s.left}>\r\n      <img src={props.avatar} alt=\"\"/>\r\n      {props.author}\r\n    </div>\r\n    <div className={s.right}>\r\n      {props.message}\r\n\r\n    </div>\r\n\r\n  </div>\r\n}","import React from 'react';\r\nimport {\r\n  DialogsPageType,\r\n  sendMessageCreator,\r\n  updateNewMessageAuthorCreator,\r\n  updateNewMessageBodyCreator\r\n} from '../../redux/dialogs-reducer';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {Dispatch} from 'redux';\r\nimport {Dialogs} from './Dialogs';\r\n\r\ntype MapStatePropsType = {\r\n  dialogsPage: DialogsPageType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n  updateNewMessageAuthor: (author: string) => void\r\n  updateNewMessageBody: (body: string) => void\r\n  sendMessage: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType):MapStatePropsType => {\r\n  return {\r\n    dialogsPage: state.dialogsPage\r\n  }\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n  return {\r\n    updateNewMessageAuthor: (author: string) => {\r\n      dispatch(updateNewMessageAuthorCreator(author));\r\n    },\r\n    updateNewMessageBody: (body: string) => {\r\n      dispatch(updateNewMessageBodyCreator(body));\r\n    },\r\n    sendMessage: () => {\r\n      dispatch(sendMessageCreator())\r\n    }\r\n  }\r\n}\r\n\r\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps )(Dialogs);","import React, {ChangeEvent} from 'react';\r\nimport s from './Dialogs.module.scss'\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {Message} from './Message/Message';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>)\r\n  let messagesElements = state.messages.map(m =>\r\n    <Message key={m.id}\r\n             message={m.message}\r\n             author={m.author}\r\n             avatar={m.avatar}\r\n    />)\r\n  let newMessageAuthor = state.newMessageAuthor;\r\n  let newMessageBody = state.newMessageBody;\r\n\r\n  let onSendMessageClick = () => {\r\n    props.sendMessage();\r\n  }\r\n\r\n  const onNewAuthorChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    let author = e.target.value;\r\n    props.updateNewMessageAuthor(author)\r\n  }\r\n  const onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    let body = e.target.value;\r\n    props.updateNewMessageBody(body)\r\n  }\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogItems}>\r\n        {dialogsElements}\r\n      </div>\r\n      <div className={s.messages}>\r\n        {messagesElements}\r\n        <div className={s.newMessageContainer}>\r\n          <div className={s.newMessageAuthor}>\r\n            <div>Author:</div>\r\n            <textarea placeholder=\"Enter your name\" onChange={onNewAuthorChange} value={newMessageAuthor}/>\r\n          </div>\r\n          <div className={s.newMessageText}>\r\n            <div>Text:</div>\r\n            <textarea placeholder=\"Enter your message\" onChange={onNewMessageChange} value={newMessageBody}/>\r\n          </div>\r\n          <button onClick={onSendMessageClick}>Send</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport {TopType} from '../../../redux/profile-reducer';\r\nimport {ProfileInfo} from './ProfileInfo';\r\n\r\ntype MapStatePropsType = {\r\n  top: TopType\r\n}\r\n\r\nexport type ProfileInfoPropsType = MapStatePropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    top: state.profilePage.top\r\n  }\r\n}\r\n\r\nexport const ProfileInfoContainer = connect(mapStateToProps)(ProfileInfo)","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileInfoPropsType} from './ProfileInfoContainer';\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = (props) => {\r\n  return <>\r\n    <img src={props.top.imgSrc} alt=\"\"/>\r\n    <div className={s.descriptionBlock}>\r\n      ava + description\r\n    </div>\r\n  </>\r\n}","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\nexport type PostType = {\r\n  message: string\r\n  likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PostType> = (props) => {\r\n  return (\r\n    <div>\r\n      <div className={s.item}>\r\n        <img src={process.env.PUBLIC_URL + '/img/ava.png'} alt=\"\"/>\r\n        <div>\r\n          <div className={s.text}>{props.message}</div>\r\n          <div className={s.likes}>Likes: {props.likesCount}</div>\r\n        </div>\r\n      </div>\r\n      <span>like</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport {addPostActionCreator, PostsType, updateNewPostTextActionCreator} from '../../../redux/profile-reducer';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport {Dispatch} from 'redux';\r\nimport {MyPosts} from './MyPosts';\r\n\r\ntype MapStatePropsType = {\r\n  posts: Array<PostsType>\r\n  newPostText: string\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n  updateNewPostText:(text: string) => void\r\n  addPost: () => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n  return {\r\n    updateNewPostText: (text: string) => {\r\n      let action = updateNewPostTextActionCreator(text);\r\n      dispatch(action)\r\n    },\r\n    addPost: () => {\r\n      dispatch(addPostActionCreator());\r\n    }\r\n  }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import React from 'react';\r\nimport Post from './Post/Post';\r\nimport s from './MyPost.module.css'\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\n\r\nexport const MyPosts: React.FC<MyPostsPropsType> = (props) => {\r\n  let postElements = props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n  let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n  let onAddPost = () => {\r\n    props.addPost();\r\n  }\r\n\r\n  let onPostChange = () => {\r\n    if (newPostElement.current) { // current - ссылается на нативный html элемент\r\n      let text = newPostElement.current.value;\r\n      props.updateNewPostText(text)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <div>\r\n        <div>\r\n          <textarea placeholder='Enter your post' onChange={onPostChange} ref={newPostElement}\r\n                    value={props.newPostText}/>\r\n        </div>\r\n        <div>\r\n          <button onClick={onAddPost}>Add post</button>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <div className={s.posts}>\r\n          {postElements}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport {ProfileInfoContainer} from './ProfileInfo/ProfileInfoContainer';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\n\r\nexport const Profile = () => {\r\n  return (\r\n    <div className={s.content}>\r\n      <ProfileInfoContainer/>\r\n      <MyPostsContainer />\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport const News = () => {\r\n  return (\r\n    <div>\r\n      News\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport const Music = () => {\r\n  return (\r\n    <div>\r\n      Music\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport const Settings = () => {\r\n  return (\r\n    <div>\r\n      Settings\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Route} from 'react-router-dom';\r\nimport {UsersContainer} from './components/Users/UsersContainer';\r\nimport {Header} from './components/Header/Header';\r\nimport {SidebarContainer} from './components/Sidebar/SidebarContainer';\r\nimport {DialogsContainer} from './components/Dialogs/DialogsContainer';\r\nimport {Profile} from './components/Profile/Profile';\r\nimport {News} from './components/News/News';\r\nimport {Music} from './components/Music/Music';\r\nimport {Settings} from './components/Settings/Settings';\r\n\r\nexport const App = () => {\r\n  return (\r\n    <div className={'app-wrapper'}>\r\n      <Header/>\r\n      <SidebarContainer />\r\n      <div className={'app-wrapper-content'}>\r\n        <Route path=\"/dialogs\" render={() => <DialogsContainer />}/>\r\n        <Route path=\"/profile\" render={ () => <Profile />}/>\r\n        <Route path=\"/news\" render={() => <News/>}/>\r\n        <Route path=\"/music\" render={() => <Music/>}/>\r\n        <Route path=\"/settings\" render={() => <Settings/>}/>\r\n        <Route path=\"/users\" render={() => <UsersContainer/>}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './redux/redux-store';\r\nimport {App} from './App';\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <Provider store={store}>\r\n      <App/>\r\n    </Provider>\r\n  </HashRouter>, document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}